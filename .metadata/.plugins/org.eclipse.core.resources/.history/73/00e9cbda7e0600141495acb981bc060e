Quick Sort 快速排序 

Class	Sorting algorithm
Worst case performance	O(n^2)
Best case performance	O(n log n) (simple partition)
or O(n) (three-way partition and equal keys)
Average case performance	O(n log n)
Worst case space complexity	O(n) auxiliary (naive)
O(log n) auxiliary 

选定一个枢纽元素，对待排序序列进行分割，分割之后的序列一个部分小于枢纽元素，
一个部分大于枢纽元素，再对这两个分割好的子序列进行上述的过程。
平均效率O（nlogn），适用于排序大列表。 
此算法的总时间取决于枢纽值的位置；选择第一个元素作为枢纽，可能导致O（n²）的最糟用例效率。若数基本有序，效率反而最差。选项中间值作为枢纽，效率是O（nlogn）。 
基于分治法。 

Quicksort's sequential and localized memory references work well with a cache. 
Quick sort is a comparison sort and, in efficient implementations, is not a stable sort.

The divide-and-conquer strategy is used in quick sort. Below the recursion step is described:
1 Choose a pivot value. We take the value of the middle element as pivot value, but it can be any value, which is in range of sorted values, even if it doesn't present in the array.
2 Partition. Rearrange elements in such a way, that all elements which are lesser than the pivot go to the left part of the array and all elements greater than the pivot, go to the right part of the array. Values equal to the pivot can stay in any part of the array. Notice, that array may be divided in non-equal parts.
3 Sort both parts. Apply quick sort algorithm recursively to the left and the right parts.